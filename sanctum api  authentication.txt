1. install Laravel Sanctum
2. php artisan vendor:publish --provider="Laravel\Sanctum\SanctumServiceProvider"
3. php artisan migrate
4. go to app/Http/Kernel.php add/uncomment- \Laravel\Sanctum\Http\Middleware\EnsureFrontendRequestsAreStateful::class, 
5. create 'PersonalAccessToken.php' inside Models/Sanctum and paste bellow code:

	<?php

	namespace App\Models\Sanctum; // place your file to Models/Sanctum/PersonalAccessToken.php
	use Laravel\Sanctum\PersonalAccessToken as SanctumPersonalAccessToken;

	class PersonalAccessToken extends SanctumPersonalAccessToken
	{
	    // ...
	}
6. open App\Providers\AppServiceProviders.php add:-
	use App\Models\Sanctum\PersonalAccessToken;
	use Laravel\Sanctum\Sanctum;

	public function boot(): void
	{
	    Sanctum::usePersonalAccessTokenModel(PersonalAccessToken::class);
	}

7. open User Model and add:-
	use Laravel\Sanctum\HasApiTokens;
	class User extends Authenticatable
	{
	    use HasApiTokens, HasFactory, Notifiable;
	}

8. create Api/AuthController and add:

<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use Illuminate\Http\Request;
use App\Models\User;
use Illuminate\Support\Facades\Hash;
use Illuminate\Support\Facades\Validator;
use Illuminate\Support\Facades\Auth;

class AuthController extends Controller
{
    
    public function createUser(Request $request)
    {
        try {
            //Validated
            $validateUser = Validator::make($request->all(), 
            [
                'name' => 'required',
                'email' => 'required|email|unique:users,email',
                'password' => 'required'
            ]);

            if($validateUser->fails()){
                return response()->json([
                    'status' => false,
                    'message' => 'validation error',
                    'errors' => $validateUser->errors()
                ], 401);
            }

            $user = User::create([
                'name' => $request->name,
                'email' => $request->email,
                'password' => Hash::make($request->password)
            ]);

            return response()->json([
                'status' => true,
                'message' => 'User Created Successfully',
                'token' => $user->createToken("API TOKEN")->plainTextToken
            ], 200);

        } catch (\Throwable $th) {
            return response()->json([
                'status' => false,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    public function loginUser(Request $request)
    {
        try {
            $validateUser = Validator::make($request->all(), 
            [
                'email' => 'required|email',
                'password' => 'required'
            ]);

            if($validateUser->fails()){
                return response()->json([
                    'status' => false,
                    'message' => 'validation error',
                    'errors' => $validateUser->errors()
                ], 401);
            }

            if(!Auth::attempt($request->only(['email', 'password']))){
                return response()->json([
                    'status' => false,
                    'message' => 'Email & Password does not match with our record.',
                ], 401);
            }

            $user = User::where('email', $request->email)->first();

            return response()->json([
                'status' => true,
                'message' => 'User Logged In Successfully',
                'token' => $user->createToken("API TOKEN")->plainTextToken
            ], 200);

        } catch (\Throwable $th) {
            return response()->json([
                'status' => false,
                'message' => $th->getMessage()
            ], 500);
        }
    }

    public function userProfile(Request $request){
        $user = $request->user();

        return response()->json([
            'status' => true,
            'user' => $user,
        ], 200);
    }

    public function refreshToken(Request $request){
        $user = $request->user();
        $user->currentAccessToken()->delete();

        return response()->json([
            'status' => true,
            'message' => 'User token successfully regenerated',
            'token' => $user->createToken("API TOKEN")->plainTextToken
        ], 200);
    }

    public function userLogout(Request $request){
        $user = $request->user();
        $user->tokens()->delete();

        return response()->json([
            'status' => true,
            'message' => 'Logout successfull',
        ], 200);
    }
    
}

9. Declear Routes api.php/custon.php:
<?php

use App\Http\Controllers\Api\AuthController;
use Illuminate\Support\Facades\Route;


Route::post('/auth/register', [AuthController::class, 'createUser']);
Route::post('/auth/login', [AuthController::class, 'loginUser']);

Route::middleware('auth:sanctum')->group(function () {
    Route::post('/auth/refresh-token', [AuthController::class, 'refreshToken']);
    Route::post('/user/profile', [AuthController::class, 'userProfile']);
    Route::post('/auth/logout', [AuthController::class, 'userLogout']);
});


10.
resources/js/bootstrap.js file
axios.defaults.withCredentials = true;

Subdomain config:- config/session.php
'domain' => '.domain.com',

CSRF Protection:
To authenticate your SPA, your SPA's "login" page should first make a request to 
the /sanctum/csrf-cookie endpoint to initialize CSRF protection for the application:
axios.get('/sanctum/csrf-cookie').then(response => {
    // Login...
});
